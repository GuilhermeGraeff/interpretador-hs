Code examples:

let x = if ( true ^ true ) then 15 else 25 in ( x + 10 )      - Num 25
let x = if ( true ^ false ) then 15 else 25 in ( x + 10 )     - Num 35

(x : Bool > x ^ true ) false     - MyFalse
(x : Bool > x ^ true ) true      - MyTrue

(x : Bool Bool > x true ^ y) (y : Bool > y ^ true)         - Dead Lock

(x : Bool Bool > x true ^ true) (y : Bool > y ^ true)      - MyTrue
(x : Bool Bool > x true ^ true) (y : Bool > y ^ false)     - MyFalse

if (x : Num Bool > x 12 * 3 * 1) (y : Num > y + 1000) then true else false    - Type error: erro na verificação de tipos
if true then (x : Num Num > x 12 * 3 * 1) (y : Num > y + 1000) else 2         - Num 1036
if false then (x : Num Num > x 12 * 3 * 1) (y : Num > y + 1000) else 2        - Num 2


typecheck $ parser $ lexer "if true then |123,213|.1 else |123,213|.2"    - (if sí aceita bool como condição)erro na verificação de tipos
typeof [] ( parser $ lexer "if true then |123,213|.1 else |123,213|.2")   - Just TNum

if |true,false|.2 then 10 + |123,213|.1 else |123,213|.1")         - Num 123

if |true,false|.1 then 10 + |123,213|.1 else |123,213|.1")         - Num 133

let x = {1,{2,2}} in x.1 + 3                                       - Num 4

if [1,2,true ^ false].3 then (x : Num > x + 3) {123,true}.1 else 1*2*3       -Num 6



Just because you’ve implemented something doesn’t mean you understand it.
—Brian Cantwell Smith

